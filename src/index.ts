
var MerkleTools = require('../src/merkle-tools/merkletools.js');
import { OriginLeaf, leaf_handler} from "../src/leaf_handler/src/leaf_handler"
import {concat_U8a} from "../src/leaf_handler/src/types_handler"
import { RLP } from '@ethereumjs/rlp'
import { v4 as uuidv4, parse as uuidParse} from 'uuid';
const BN = require("bn.js");

// =================== example data ==========================
// the rlp_code of "zcloak" is  [134, 122, 99, 108, 111, 97, 107]
let string_zcloak_u8a = RLP.encode("zcloak");
// the rlp_code of 22 is  [22]
let number_22_u8a = RLP.encode(22);


// generated by uuidv4()
let uuid_11 = "505e3652-18ff-487e-aab2-6abad9100ce5";
let uuid_12 = "6a918fb8-8f87-4d87-8a5d-15f1eddfbe92";
let uuid_21 = "6cc0fc1b-a08f-4bcb-b050-995bd50ee8f7";
let uuid_22 = "c6f10eab-0a12-434b-a724-05e23aedfd70";

let [uuid_first_string, uuid_first_u8a] = uuid_composer(uuid_11, uuid_12);
let [uuid_next_string, uuid_next_u8a] = uuid_composer(uuid_21, uuid_22);

//==========================================================


let originleaves: OriginLeaf[] = [
    // index -- start with 0
    {index:1, rlp: number_22_u8a, uuid: uuid_first_u8a},
    {index:0, rlp: string_zcloak_u8a, uuid: uuid_next_u8a}
];

let roothash = leaf_handler(originleaves);


console.log("roothash is: ", roothash)


function uuid_composer(
    uuid_1: string,
    uuid_2: string
):[String, Uint8Array] {
    let uuid_1_parse = uuidParse(uuid_1);
    let uuid_2_parse = uuidParse(uuid_2);

    let uuid_256_1 = Uint8Array.from(uuid_1_parse);
    let uuid_256_2 = Uint8Array.from(uuid_2_parse);

    let uuid_compose_u8a = concat_U8a(uuid_256_1, uuid_256_2)
    let uuid_compose_string = uuid_1 + ',' + uuid_2;
    return [uuid_compose_string, uuid_compose_u8a]
}
