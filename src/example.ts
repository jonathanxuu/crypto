
var MerkleTools = require('../src/merkle-tools/merkletools.js');
import { OriginLeaf, leaf_handler} from "../src/leaf_handler/src/leaf_handler"
import {concat_U8a} from "../src/leaf_handler/src/types_handler"
import { RLP } from '@ethereumjs/rlp'
import { v4 as uuidv4, parse as uuidParse} from 'uuid';
import { assert } from "console";
const BN = require("bn.js");

// =================== example data(Alice Li's E-passport) ==========================
// the total number of leaves is 8
let leaves_number = 8;

let rlp_array: Array<Uint8Array> = [];

let name = RLP.encode("Alice Li"); //name_rlp
rlp_array.push(name);

let date_of_birth_with_sec = new Date('1995-05-12 00:00:00');
let date_of_birth_without_sec = new Date('1995-05-12');
// The two form of representation of date without sec are not the same, I(xyz) prefer the first one -- 'with sec'
assert(date_of_birth_with_sec.getTime() != date_of_birth_without_sec.getTime(), "The two forms are the same!!!");
// get timestamp to milliseconds
let date_of_birth = RLP.encode(date_of_birth_with_sec.getTime()); //date_of_birth_rlp
rlp_array.push(date_of_birth);

let place_of_birth = RLP.encode("Shanghai, China");
rlp_array.push(place_of_birth);

let nationality = RLP.encode("Chinese");
rlp_array.push(nationality);

let passport_type = RLP.encode("P");
rlp_array.push(passport_type);

let passport_number = RLP.encode("E264557990");
rlp_array.push(passport_number);

let issue_date_with_sec = new Date('2020-03-15 00:00:00')
let issue_date = RLP.encode(issue_date_with_sec.getTime());
rlp_array.push(issue_date);

let expiration_date_with_sec = new Date('2030-04-01 00:00:00')
let expiration_date = RLP.encode(expiration_date_with_sec.getTime());
rlp_array.push(expiration_date);

// ==================== example UUID(generated by `uuidv4()`)=============================

// All generated by uuidv4()
let uuid_11 = "505e3652-18ff-487e-aab2-6abad9100ce5";
let uuid_12 = "6a918fb8-8f87-4d87-8a5d-15f1eddfbe92";
let uuid_21 = "6cc0fc1b-a08f-4bcb-b050-995bd50ee8f7";
let uuid_22 = "c6f10eab-0a12-434b-a724-05e23aedfd70";
let uuid_31 = "dc93efcb-bf44-40be-aa0e-6279027998a5";
let uuid_32 = "f83b316d-8d26-4328-b8e0-3fc69afb649a";
let uuid_41 = "e8e9be30-1d57-48dd-a500-0453ba4037dd";
let uuid_42 = "d263994d-e7ff-4b64-9ab8-9e0e9e72da3e";
let uuid_51 = "07f09cb3-ba98-48aa-94e7-e533fe12ade6";
let uuid_52 = "b726fda9-b359-4c9f-b910-c428cef1d199";
let uuid_61 = "5c2cbb2d-8e85-4785-9c02-201f4fbd6b3b";
let uuid_62 = "d8b71bf7-c5cd-40ba-b2ed-5756c3d873a6";
let uuid_71 = "4052f000-a899-4e9d-9329-2fa66aa13111";
let uuid_72 = "41a011d6-0c3e-4deb-8300-5b32f450bc56";
let uuid_81 = "4baee649-3959-4bdb-ac45-cc2d786585e5";
let uuid_82 = "ec81475c-cc32-462b-9822-f11465f9abfe";

let uuid_array: Array<Uint8Array> = [];

let [_uuid_name_string, uuid_name] = uuid_composer(uuid_11, uuid_12);
uuid_array.push(uuid_name)
let [_uuid_date_of_birth_string, uuid_date_of_birth] = uuid_composer(uuid_21, uuid_22);
uuid_array.push(uuid_date_of_birth)
let [_uuid_place_of_birth_string, uuid_place_of_birth] = uuid_composer(uuid_31, uuid_32);
uuid_array.push(uuid_place_of_birth)

let [_uuid_nationality_string, uuid_nationality] = uuid_composer(uuid_41, uuid_42);
uuid_array.push(uuid_nationality)

let [_uuid_passport_type_string, uuid_passport_type] = uuid_composer(uuid_51, uuid_52);
uuid_array.push(uuid_passport_type)

let [_uuid_passport_number_string, uuid_passport_number] = uuid_composer(uuid_61, uuid_62);
uuid_array.push(uuid_passport_number)

let [_uuid_issue_date_string, uuid_issue_date] = uuid_composer(uuid_71, uuid_72);
uuid_array.push(uuid_issue_date)

let [_uuid_expiration_date_string, uuid_expiration_date] = uuid_composer(uuid_81, uuid_82);
uuid_array.push(uuid_expiration_date)



// ========================= Generate Origin Leaves ==================================
let all_leaves:OriginLeaf[] = [];

for(let i = 0; i < leaves_number; i++){
    let res: OriginLeaf = {
        index: i,
        rlp: rlp_array[i],
        uuid: uuid_array[i]
    };
    all_leaves[i] = res;
}

// ==========================  Calculate RootHash ====================================
// The corresponding roothash should be 0x024199ee0c47214c2182fb46c7ed8498100a6bac3205a405dc71e41a313b9748
let roothash = leaf_handler(all_leaves); 

console.log("roothash is: ", roothash);










//===================== Helper ===========================
function uuid_composer(
    uuid_1: string,
    uuid_2: string
):[String, Uint8Array] {
    let uuid_1_parse = uuidParse(uuid_1);
    let uuid_2_parse = uuidParse(uuid_2);

    let uuid_256_1 = Uint8Array.from(uuid_1_parse);
    let uuid_256_2 = Uint8Array.from(uuid_2_parse);

    let uuid_compose_u8a = concat_U8a(uuid_256_1, uuid_256_2)
    let uuid_compose_string = uuid_1 + ',' + uuid_2;
    return [uuid_compose_string, uuid_compose_u8a]
}

